#!/bin/bash


DATABASE_HOST=
DATABASE_PASSWORD=
DATABASE_NAME=
DATABASE_USER=
FQDN=
CONTENT=
TTL=60
DOMAIN=
VERBOSE=0

usage()
{
    cat << EOF
usage: $0 options
example: $0 -h mysql.example.com -D pdns -z example.com -f router.example.com -u pdns -p pdns 192.168.10.1

This script create or updates a pdns A record!

OPTIONS:
   -h      Database hostname
   -D      Database name eg. pdns
   -p      Database password
   -u      Database user
   -f      Fqdn
   -t      TTL
   -z      Domain (zone)
   -v      Verbose
EOF
}

check_mysql(){
    if [[ ! -x `which mysql` ]]; then
        echo "Mysql client not found!" >&2
        exit 1
    fi
}

check_mysql

while getopts "h:D:p:f:z:u:v" opt; do
    case $opt in
        h)
            DATABASE_HOST=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        D)
            DATABASE_NAME=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        p)
            DATABASE_PASSWORD=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        u)
            DATABASE_USER=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        f)
            FQDN=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        z)
            DOMAIN=$OPTARG
            shift $((OPTIND-1)); OPTIND=1
            ;;
        v)
            VERBOSE=1
            ;;
        \?)
            usage
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

CONTENT=$@

if [ "$CONTENT" = "" ]; then
    echo "No value for record given" >&2
    usage
    exit 1
fi

if [ "$DATABASE_HOST" = "" ]; then
    echo "Database host is required" >&2
    usage
    exit 1
fi

if [ "$DATABASE_NAME" = "" ]; then
    echo "Database name is required" >&2
    usage
    exit 1
fi

if [ "$DATABASE_USER" = "" ]; then
    echo "Database user is required" >&2
    usage
    exit 1
fi

if [ "$FQDN" = "" ]; then
    echo "FQDN is required, the dns record name" >&2
    usage
    exit 1
fi

if [ "$DOMAIN" = "" ]; then
    echo "Domain the zone/domain for the record" >&2
    usage
    exit 1
fi

if [ "$DATABASE_PASSWORD" = "" ]; then
    PWARG=""
else
    PWARG="-p$DATABASE_PASSWORD"
fi

MYSQLCMD="mysql --column-names=FALSE -u $DATABASE_USER -h $DATABASE_HOST -D $DATABASE_NAME $PWARG"
QUERY_ID="SELECT id from domains where name = '$DOMAIN'"

DOMAIN_ID=`$MYSQLCMD -e "$QUERY_ID"`

if [ $VERBOSE -eq 1 ]; then
    echo "Database hostname: $DATABASE_HOST"
    echo "Database name: $DATABASE_NAME"
    echo "Database user: $DATABASE_USER"
    echo "Database password: $DATABASE_PASSWORD"
    echo "FQDN: $FQDN"
    echo "TTL: $TTL"
    echo "Content: $CONTENT"

    echo "Generated mysql command: $MYSQLCMD"
    echo "Gathered domain id: $DOMAIN_ID"
fi


RECORD=`$MYSQLCMD << EDQ | sed -e 's/\t/,/g'
SELECT id,count(*) from records WHERE name='$FQDN' AND TYPE='A'
EDQ
`
count=$(echo $RECORD | cut -d ',' -f 2)
id=$(echo $RECORD | cut -d ',' -f 1)
host=`echo $FQDN |awk -F. '{ print $1 }'`

update_time=`date +%s`

if [ $count -eq 0 ]; then
    QUERY_INSERT="INSERT INTO records (id,domain_id,name,type,content,ttl,prio,change_date,ordername,auth) VALUES(NULL,$DOMAIN_ID,'$FQDN','A','$CONTENT',$TTL,0,$update_time,'$host',1)"
    if [ $VERBOSE -eq 1 ]; then
        echo "No record found inserting: $QUERY_INSERT"
    fi
    $MYSQLCMD -e "$QUERY_INSERT"
else
    QUERY_UPDATE="UPDATE records SET content='$CONTENT',change_date='$update_time'  WHERE id=$id"
    if [ $VERBOSE -eq 1 ]; then
        echo "Record found updating: $QUERY_UPDATE"
    fi
    $MYSQLCMD -e "$QUERY_UPDATE"
fi
